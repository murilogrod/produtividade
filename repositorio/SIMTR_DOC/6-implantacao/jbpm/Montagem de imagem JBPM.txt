* Iniciar o Keycloak:
		 ./standalone.sh -Djboss.socket.binding.port-offset=100	
		 
* Acessar a interface do Keycloak (http://localhost:8180/auth) e configurar uma instalação limpa do Keycloak localmente da seguinte forma:
	- Criar o usuário e senha de administrador do keycloak
	- Adicionar realm intranet
	- Adicionar client cli-web-mtr-bpm: 
		- public
		- Root URL: http://localhost:8080
		- Valid Redirect URI: http://localhost:8080/*
	- Adicionar roles admin e MTRBPMADM no realm intranet
	- Criar um novo usuário (c106315)
		- Na aba credentials do usuário colocar uma senha, retirar a opção temporary
		- Na aba role mappings do usuário colocar as roles admin e MTRBPMADM
				
* Descompactar o arquivo jbpm-server-<versao>.Final-dist.zip em um pasta de mesmo nome e acessa-la para as próximas configurações;

* Descompactar o adapter do Keycloak/SSO dentro da pasta principal do JBPM (o adapter pode ser obtido na área de downloads de keycloak.org);

* Iniciar o standalone do JBPM:
			.\standalone.bat -c standalone-full.xml

* Após sua subida, abrir linha de comando na pasta bin/ e executar o arquivo de configuração do Keycloak:
			.\jboss-cli.bat -c --file=.\adapter-elytron-install.cli
			
* Verificado que houve sucesso nos passos do script de configuração do Keycloak, desligue o standalone do JBPM;

* Editar o arquivo standalone/configuration/standalone-full.xml incluindo as configurações do keycloak na tag <subsystem xmlns="urn:jboss:domain:keycloak:1.1"/>;
	- Exemplo (importante as propriedades principal-attribute e enable-basic-auth):
	
		<subsystem xmlns="urn:jboss:domain:keycloak:1.1">
			<secure-deployment name="business-central.war">
                <realm>intranet</realm>
                <resource>cli-web-mtr-bpm</resource>
                <enable-basic-auth>true</enable-basic-auth>
                <public-client>true</public-client>
                <auth-server-url>http://localhost:8180/auth</auth-server-url>
                <ssl-required>EXTERNAL</ssl-required>
                <principal-attribute>preferred_username</principal-attribute>
            </secure-deployment>
            <secure-deployment name="kie-server.war">
                <realm>intranet</realm>
                <resource>cli-web-mtr-bpm</resource>
                <enable-basic-auth>true</enable-basic-auth>
                <public-client>true</public-client>
                <auth-server-url>http://localhost:8180/auth</auth-server-url>
                <ssl-required>EXTERNAL</ssl-required>
                <principal-attribute>preferred_username</principal-attribute>
                <autodetect-bearer-only>true</autodetect-bearer-only>
            </secure-deployment>
			<secure-deployment name="jbpm-casemgmt.war">
                <realm>intranet</realm>
                <resource>cli-web-mtr-bpm</resource>
                <enable-basic-auth>true</enable-basic-auth>
                <public-client>true</public-client>
                <auth-server-url>http://localhost:8180/auth</auth-server-url>
                <ssl-required>EXTERNAL</ssl-required>
                <principal-attribute>preferred_username</principal-attribute>
            </secure-deployment>
		</subsystem> 
		
=============================================== INICIO PROCESSO MAP BUSINESS-CENTRAL
* Ir até a pasta /standalone/deployments/ e extrair os arquivos WEB-INF/web.xml e WEB-INF/classes/security-module-admin.properties do arquivo business-central.war;
	- Editar o web.xml inserindo a role MTRBPMADM onde houver a role admin:	
			<role-name>admin</role-name>
			<role-name>MTRBPMADM</role-name>
			
	- Incluir no web.xml a role MTRBPMADM logo abaixo da role admin:
			<security-role>
				<description>Administrator - Administrates the BPMS system. Has full access
				  rights to make any changes necessary. Also has the
				  ability to add and remove users from the system.
				</description>
				<role-name>MTRBPMADM</role-name>
			</security-role>
			
	- Alterar o nome do arquivo extraído de security-module-admin.properties para security-module-MTRBPMADM.properties;
	- No arquivo security-module-MTRBPMADM.properties, alterar todos os registros da palavra admin para MTRBPMADM;
	
* Mover o arquivo web.xml de volta para o pacote business-central.war substituindo o original;
* Mover o arquivo security-module-MTRBPMADM.properties, adicionando-o no pacote business-central.war na pasta WEB-INF/classes/;
* Deletar todos os arquivos que estavam extraídos e já foram inseridos no pacote novamente (não devem sobrar arquivos extraídos nesse momento);

* Iniciar o standalone do JBPM:
	.\standalone.bat -c standalone-full.xml

* Acessar o business-central (http://localhost:8080/business-central/) e ir até as configurações (engrenagem no canto superior direito);
	- Acessar o menu Roles
	- Editar o MTRBPMADM para que fique exatamente igual ao admin (ele estará com as permissões desativadas)
	- Atentar para exceções no grupo pages e para os subitens de Workbench

=============================================== FIM PROCESSO MAP BUSINESS-CENTRAL

* Executar o PROCESSO MAP BUSINESS-CENTRAL, assim como foi feito para o admin->MTRBPMADM para os demais perfis:
			admin 		-> MTRBPMADM (process-admin está incluso aqui)
			admin		-> MTRSDNINT (o perfil de integração deve ter acesso de ADM no business-central)
			developer 	-> MTRBPMDEV
			analyst 	-> MTRBPMANP
			user 		-> MTRBPMUSU
			manager 	-> MTRBPMAPV
		
* Acessar a interface do Keycloak
	- Remover o perfil admin do usuário (agora ele acessará somente com o MTRBPMADM)
	- Criar a role kie-server no realm intranet
	- Criar um usuário de serviço fictício (SMTRBD01), e incluir ele nas roles kie-server e MTRBPMADM
	- Cadastrar uma senha para o usuário de serviço
	
* Utilizar a ferramenta keytool (fica na pasta do Java/JDK/bin/) para gerar um arquivo que irá abrigar de forma segura a senha do usuário de serviço:
	- A senha será inserida duas vezes no mesmo arquivo, através dos dois comandos abaixo (alterar apenas o caminho local C:\... conforme o caso):
	
	.\keytool.exe -importpassword -keystore C:\Users\c106315\Desktop\JBPM\jbpmkeystore.jceks -keypass keypwd -alias bcKey -storepass serverpwd -storetype JCEKS
	.\keytool.exe -importpassword -keystore C:\Users\c106315\Desktop\JBPM\jbpmkeystore.jceks -keypass keypwd -alias kieKey -storepass serverpwd -storetype JCEKS

	- Mover o arquivo gerado para a pasta do JBPM/standalone/configuration/
	
* Editar o standalone-full.xml do JBPM incluindo properties:      
	- Exemplo:		
        <property name="org.kie.server.controller" value="http://localhost:8080/business-central/rest/controller"/>
        <property name="org.kie.server.controller.user" value="SMTRBD01"/>
        <property name="org.kie.server.id" value="simtr-bpm-server"/>
        <property name="org.kie.server.location" value="http://localhost:8080/kie-server/services/rest/server"/>
		<property name="org.kie.server.persistence.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
        <property name="org.kie.server.persistence.ds" value="java:jboss/datasources/jBPMDS"/>
        <property name="org.kie.server.user" value="SMTRBD01"/>
        <property name="org.jbpm.casemgmt.showcase.url" value="/jbpm-casemgmt"/>
        <property name="org.jbpm.ht.admin.group" value="MTRBPMADM"/>
        <property name="org.jbpm.task.cleanup.enabled" value="false"/>
        <property name="appformer.experimental.features" value="true"/>
        <property name="org.kie.prometheus.server.ext.disabled" value="false"/>
        <property name="kie.keystore.keyStoreURL" value="file:///${jboss.server.config.dir}/jbpmkeystore.jceks"/>
        <property name="kie.keystore.keyStorePwd" value="serverpwd"/>
        <property name="kie.keystore.key.server.alias" value="kieKey"/>
        <property name="kie.keystore.key.server.pwd" value="keypwd"/>
        <property name="kie.keystore.key.ctrl.alias" value="bcKey"/>
        <property name="kie.keystore.key.ctrl.pwd" value="keypwd"/>
	
	- Pontos de atenção:
		- O usuário de serviço do controller e do server deverá ser fornecido em duas propriedades (org.kie.server.user e org.kie.server.controller.user);
		- Nas propriedades do kie.keystore:
			- Para keyStoreURL, indicar o nome do arquivo que foi gerado ao rodar o keytool
			- Na keyStorePwd, verificar o valor que foi informado nos comandos keytool (nesse caso serverpwd)
			- Nas propriedades alias e pwd, verificar o par que foi utilizado dessas configurações no comando do keytool
			
	- Adicionar o xa-datasource que foi mencionado nas propriedades acima. Adicionar como último datasource, logo antes dos <drivers>:	
				<xa-datasource jndi-name="java:jboss/datasources/jBPMDS" pool-name="jBPMXADS" enabled="true">
                    <xa-datasource-property name="URL">
                        jdbc:h2:file:${jboss.server.data.dir}/jbpm-db;MVCC=TRUE
                    </xa-datasource-property>
                    <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>
                    <driver>h2</driver>
                    <security>
                        <user-name>sa</user-name>
                        <password>sa</password>
                    </security>
                </xa-datasource>

* Iniciar o standalone do JBPM e verificar se ao final da subida ele consegue a integração com sucesso entre business-central e kie-server
	- Isso é evidenciado pelo log abaixo:
				....... successfully registered on kie server 'simtr-bpm-server@localhost:8080'

* Desativar o standalone do JBPM

* Ir até a pasta standalone/deployments/ e extrair os arquivos WEB-INF/web.xml e WEB-INF/weblogic.xml do kie-server.war
	- No arquivo web.xml, na auth-constraint onde havia kie-server e user, incluir também MTRSDNINT e MTRBPMUSU:
			<auth-constraint>
			  <role-name>kie-server</role-name>
			  <role-name>MTRSDNINT</role-name>
			  <role-name>user</role-name>	  
			  <role-name>MTRBPMUSU</role-name>
			</auth-constraint>
			
	- No arquivo web.xml, no grupo de security-role, adicionar MTRSDNINT e MTRBPMUSU, conforme abaixo:
			  <security-role>
				<role-name>kie-server</role-name>
			  </security-role>
			  <security-role>
				<role-name>MTRSDNINT</role-name>
			  </security-role>
			  <security-role>
				<role-name>user</role-name>
			  </security-role>
			  <security-role>
				<role-name>MTRBPMUSU</role-name>
			  </security-role>
		
	- No arquivo weblogic.xml, adicionar a role MTRSDNINT logo abaixo da role kie-server:
			<role-name>MTRSDNINT</role-name>
	
	- Mover os arquivos web.xml e weblogic.xml de volta para o pacote kie-server.war substituindo os originais;
	- Deletar todos os arquivos que estavam extraídos e já foram inseridos no pacote novamente (não devem sobrar arquivos extraídos nesse momento);

* Na console de administração do Keycloak, remover o perfil kie-server do usuário de serviço (SMTRBD01) e incluir o perfil MTRSDNINT;

* Iniciar o standalone do JBPM e verificar se ao final da subida ele consegue a integração com sucesso entre business-central e kie-server
	- Isso é evidenciado pelo log abaixo:
				....... successfully registered on kie server 'simtr-bpm-server@localhost:8080'

* Testar um ciclo completo:
	- Criação de Projeto
	- Criação de Processo (colocar uma tarefa de script com System.out.println("teste");)
	- Build e Deploy de Projeto
	- Criação de uma instância do Processo
				
* Desativar o standalone do JBPM

* Alterar o subsystem do Keycloak no standalone-full.xml, trocando todas as Auth URL pela utilizada no SSO (http://login.des.caixa/auth);

* Alterar os datasources para que sejam 3, BusinessCentralDS, SIMTR-DS e jBPMDS, todos utilizando POSTGRESQL. O resultado será semelhante ao exemplo abaixo:

			<datasources>
                <datasource jndi-name="java:jboss/datasources/BusinessCentralDS" pool-name="BusinessCentralDS" enabled="true" use-java-context="true">
                    <connection-url>jdbc:postgresql://go7875sx018.goiania.caixa:5432/posdes01</connection-url>
                    <driver>postgres</driver>
                    <security>
                        <user-name>bpmusr</user-name>
                        <password>bpm*usr</password>
                    </security>
                    <validation>
                        <valid-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"/>
                        <background-validation>true</background-validation>
                        <exception-sorter class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"/>
                    </validation>
                </datasource>
				<datasource jta="true" jndi-name="java:jboss/datasources/SIMTR-DS" pool-name="SIMTR-DS" enabled="true" use-ccm="true">
                    <connection-url>jdbc:postgresql://go7875sx018.goiania.caixa:5432/posdes01</connection-url>
                    <driver>postgres</driver>
                    <security>
                        <user-name>postgres</user-name>
                        <password>postgres</password>
                    </security>
                    <validation>
                        <valid-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"/>
                        <background-validation>true</background-validation>
                        <exception-sorter class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"/>
                    </validation>
                </datasource>
                <xa-datasource jndi-name="java:jboss/datasources/jBPMDS" pool-name="jBPMXADS">
                    <xa-datasource-property name="ServerName">
                        go7875sx018.goiania.caixa
                    </xa-datasource-property>
                    <xa-datasource-property name="PortNumber">
                        5432
                    </xa-datasource-property>
                    <xa-datasource-property name="DatabaseName">
                        posdes01
                    </xa-datasource-property>
                    <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>
                    <driver>postgres</driver>
                    <security>
                        <user-name>bpmusr</user-name>
                        <password>bpm*usr</password>
                    </security>
                    <validation>
                        <valid-connection-checker class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker"/>
                        <validate-on-match>true</validate-on-match>
                        <background-validation>true</background-validation>
                        <background-validation-millis>120000</background-validation-millis>
                        <exception-sorter class-name="org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter"/>
                    </validation>
                </xa-datasource>
                <drivers>
                    <driver name="postgres" module="org.postgres">
                        <xa-datasource-class>org.postgresql.xa.PGXADataSource</xa-datasource-class>
                    </driver>
                </drivers>
            </datasources>

			**** IMPORTANTE: o JBPM cria a estrutura do banco (DDL) de forma automática com o Hibernate, mas na versão utilizada esse processo as vezes falha. Isso pode ser contornado baixando os scripts DDL do JBPM da versão em questão.
			Esse download está disponível na área de downloads de JBPM.org e ele faz parte do pacote "Installer";

* Reservar uma pasta /imagem/ onde serão agrupados os arquivos necessários para construção da imagem do JBPM, colocar nela:
	- uma pasta certs/ contendo todos os certificados do SSO, tanto DES quanto PRD;
	- uma pasta m2/ contendo o arquivo settings.xml do Maven utilizado no PEDES e a pasta repository obtida do servidor JBPM que estava em execução;
	- o arquivo business-central.war do servidor JBPM que estava em execução, já editado em relação aos perfis do SIMTR (MTRBPMADM e demais);
	- o arquivo jbpmkeystore.jceks que foi gerado na pasta standalone/configuration/ do servidor JBPM que estava em execução;
	- o arquivo original do jbpm-server-<versao>-dist.zip;
	- o arquivo do adapter do keycloak utilizado no processo (exemplo: keycloak-wildfly-adapter-dist-6.0.1.zip);
	- o arquivo do kie-server.war do servidor JBPM que estava em execução, já editado em relação aos perfis do SIMTR (MTRSDNINT e demais);
	- o arquivo zipado modules.zip contendo a subpasta modules/org/postgres/ do servidor JBPM que estava em execução;
	- o arquivo standalone.xml que deve ser a cópia do standalone-full.xml do servidor JBPM que estava em execução;
	- o arquivo start_jbpm-wb.sh, que pode ser obtido na pasta /etc/ do repositório github do jbpm (o link está no docker hub do jbpm-server-full);
	- o arquivo Dockerfile que guiará a criação da imagem, cujo conteúdo para esta versão da imagem que foi gerada é este:
	
	
============================> INICIO DO DOCKERFILE
FROM jboss/wildfly:14.0.1.Final

ENV JBOSS_BIND_ADDRESS 0.0.0.0
ENV KIE_REPOSITORY https://download.jboss.org/jbpm/release
ENV KIE_VERSION 7.23.0.Final
ENV KIE_CLASSIFIER wildfly14
ENV KIE_CONTEXT_PATH business-central
ENV KIE_SERVER_ID simtr-bpm-server
ENV KIE_SERVER_LOCATION http://localhost:8080/kie-server/services/rest/server
ENV EXTRA_OPTS -Dorg.uberfire.nio.git.ssh.host=$JBOSS_BIND_ADDRESS

COPY . /opt/jboss
RUN unzip -o -q /opt/jboss/jbpm-server-$KIE_VERSION-dist.zip -d $JBOSS_HOME && \
unzip -o -q /opt/jboss/keycloak-wildfly-adapter-dist-6.0.1.zip -d $JBOSS_HOME && \
unzip -o -q /opt/jboss/modules.zip -d $JBOSS_HOME && \
rm -rf /opt/jboss/jbpm-server-$KIE_VERSION-dist.zip && \
rm -rf /opt/jboss/keycloak-wildfly-adapter-dist-6.0.1.zip && \
rm -rf /opt/jboss/modules.zip

####### CONFIGURATION ############
USER root

RUN mv -f /opt/jboss/start_jbpm-wb.sh $JBOSS_HOME/bin/ && \
mv -f /opt/jboss/jbpmkeystore.jceks $JBOSS_HOME/standalone/configuration/ && \
mv -f /opt/jboss/standalone.xml $JBOSS_HOME/standalone/configuration/ && \
mv -f /opt/jboss/business-central.war $JBOSS_HOME/standalone/deployments/ && \
mv -f /opt/jboss/kie-server.war $JBOSS_HOME/standalone/deployments/ && \
mv -f /opt/jboss/m2 /root/.m2 && \
chmod +x --recursive $JBOSS_HOME/bin/*.sh && \
chown --recursive root:root /opt/jboss/

####### ADD LOGIN.DES.CAIXA CERTIFICATES #############
RUN cd /opt/jboss/certs && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.des.caixa-0 -file login.des.caixa-0.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.des.caixa-1 -file login.des.caixa-1.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.des.caixa-2 -file login.des.caixa-2.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.des.caixa-3 -file login.des.caixa-3.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.des.caixa-4 -file login.des.caixa-4.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.des.caixa-5 -file login.des.caixa-5.cer --storepass changeit -noprompt 

####### ADD LOGIN.PRD.CAIXA CERTIFICATES #############
RUN cd /opt/jboss/certs && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.prd.caixa-0 -file login.prd.caixa-0.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.prd.caixa-1 -file login.prd.caixa-1.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.prd.caixa-2 -file login.prd.caixa-2.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.prd.caixa-3 -file login.prd.caixa-3.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.prd.caixa-4 -file login.prd.caixa-4.cer --storepass changeit -noprompt && \
keytool -import -keystore $JAVA_HOME/jre/lib/security/cacerts -alias login.prd.caixa-5 -file login.prd.caixa-5.cer --storepass changeit -noprompt && \
rm -rf /opt/jboss/certs

####### CUSTOM JBOSS USER ############
# Switchback to jboss user
#USER jboss

####### EXPOSE INTERNAL JBPM GIT PORT ############
EXPOSE 8001

####### RUNNING JBPM-WB ############
WORKDIR $JBOSS_HOME/bin/
CMD ["./start_jbpm-wb.sh"]

============================> FIM DO DOCKERFILE
	
* Realizar o build da imagem do JBPM. Para isso copie a pasta gerada /imagem/ para o servidor Docker e dentro dela execute o comando abaixo:
	docker build . -t jbpm-server-full:<versao>

* Verificar a imagem gerada com o comando abaixo:
	docker images
	
* Exportar a imagem para que possa ser enviada para implantação:
	docker save -o /<path_desejado>/jbpm-server-full-<versao>.tar <id_da_imagem_jbpm>
		
	
	
COMANDOS QUE PODEM SER ÚTEIS NO PROCESSO:
	Gerar/remover volumes Docker do JBPM:
		docker volume rm jbpm-bin && docker volume rm jbpm-conf && docker volume rm jbpm-m2 && docker volume rm jbpm-modules
		docker volume create jbpm-bin && docker volume create jbpm-conf && docker volume create jbpm-m2 && docker volume create jbpm-modules



/opt/jboss/wildfly/bin/.niogit/SIMTR/Concessao-Comercial-PJ.git
/opt/jboss/wildfly/bin/.niogit/SIMTR/Manipuladores-Commons.git
/opt/jboss/wildfly/bin/.niogit/SIMTR/Modelos.git


VARIÁVEIS DE AMBIENTE PARA ACIONAR CONFIGURAÇÃO AUTOMÁTICA DE BANCO DO JBPM (NÃO IREMOS UTILIZAR) (SÃO PASSADAS COMO PARÂMETRO NA SUBIDA DO CONTAINER)
	-e JBPM_DB_DRIVER=postgres -e JBPM_DB_HOST=go7875sx018.goiania.caixa -e JBPM_DB_PORT=5432 -e JBPM_DB_NAME=posdes01 -e JBPM_DB_USER=bpmusr -e JBPM_DB_PASSWORD=bpm*usr
	
	
* Para visualizar os logs do container executar o seguinte comando:
	docker logs -f <id_do_container>
* Para rodar um terminal (bash) dentro do container em execução:
	docker exec -it <nome_do_container> /bin/bash

	
* Pegar a versão do arquivo jbpm-postgres-config.cli disponível na pasta criacao_img_jbpm/ e substituir o que existe na pasta bin/ do JBPM
	- Executar o script através do comando abaixo, e depois verificar a aplicação nos datasources do standalone-full.xml
			.\jboss-cli.bat --file=.\jbpm-postgres-config.cli
	

	REFERENCIAS:

https://www.jbpm.org/download/download.html
Download da versão atual do JBPM, neste caso a 7.23.0 Final Server.



		
	


